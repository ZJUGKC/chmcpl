.Dd May 27, 2002
.Dt "LZX Compression" 3 LOCAL
.Os LOCAL
.Sh NAME
lzx_init, lzx_compress_block, lzx_finish - LZX compression
.Sh SYNOPSIS
.Fd #include \*(Ltstdint.h\*(Gt
.Fd #include \*(Ltlzx_compress.h\*(Gt
.Ft int
.Fo "lzx_init"
.Fa "lzx_data ** lzxdp" "int wsize_code"
.Fa "lzx_get_bytes_t get_bytes" "void *get_bytes_arg"
.Fa "lzx_at_eof_t at_eof"
.Fa "lzx_put_bytes_t put_bytes" "void *put_bytes_arg"
.Fa "lzx_mark_frame_t mark_frame" "void *mark_frame_arg"
.Fc
.Ft int
.Fn lzx_compress_block "lzx_data *lzxd" "int block_size" "int subdivide"
.Ft int
.Fn lzx_finish "lzx_data *lzxd" "struct lzx_results *lzxr"
.Ft void
.Fn lzx_reset "lzx_data *lzxd"
.ad
.Sh DESCRIPTION
The
.Ns Fn lzx_init ,
.Ns Fn lzx_compress_block ,
and
.Fn lzx_finish
functions comprise an compression engine for Microsoft's LZX compression
format.
.Ss Initializing and releasing the LZX compressor
The
.Fn lzx_init
function takes a
.Fa wsize_code
to indicate the log (base 2) of the window size for compression, so 15 is 32K,
16 is 64K, on up to 21 meaning 2MB.
It also takes the following callback functions and their associated arguments:
.Bl -tag -width 5 -offset indent
.It Fn "int get_bytes" "void *get_bytes_arg"  "int n" "void *buf"
The
.Fn lzx_compress_block
routine calls this function when it needs more uncompressed input to process.  The number
of bytes requested is
.Fa n
and the bytes should be placed in the buffer pointed to by
.Fa buf Ns .
The
.Fn get_bytes
function should return the number of bytes actually provided (which must not be greater
than
.Fa n Ns ),
nor 0, except at EOF.
.It Fn "int at_eof" "void * get_bytes_arg"
Must return 0 if the end of the input data has not been reached, positive otherwise.
Note that this function takes the same argument as 
.Fn get_bytes Ns .
.It Fn "int put_bytes" "void * put_bytes_arg" "int n" "void * buf"
The
.Fn put_bytes
callback is called by
.Fn lzx_compress
when compressed bytes need to be output.
The number
of bytes to be output is
.Fa n
and the bytes are in the buffer pointed to by
.Fa buf Ns .
.It Fn "int mark_frame" "void *mark_frame_arg" "uint32_t uncomp" "uint32_t comp"
The
.Fn mark_frame
callback is called whenever
.Dv LZX_FRAME_SIZE
(0x8000) uncompressed bytes have been processed.  The current (as of the last call to
.Fn put_bytes
) location in the uncompressed and compressed data streams are provided in
.Fa uncomp
and
.Fa comp
respectively.  This is intended for 
.Tn .CHM
.Pf ( Tn ITSS Ns )
and other similar files which require
a "reset table" listing the frame locations.  This callback is optional; if the
.Fa mark_frame
argument to
.Fn lzx_init
is NULL, no function will be called at the end of each frame.
.El
.Pp
The
.Fn lzx_init
function allocates an opaque structure, a pointer to which will be returned in
.Fa lzxdp Ns .
A pointer to this structure may be passed to the other LZX compression functions.
The function returns negative on error, 0 otherwise
.Pp
The
.Fn lzx_finish
function writes out any unflushed data,
releases all memory held by the compressor (including the
.Fa lzxd
structure) and optionally fills in the
.Fa lzx_results
structure, a pointer to which is passed in as
.Fa lzxr
(NULL if results are not required)
.Ss Running the compressor
The
.Fn lzx_compress_block
function takes the opaque pointer returned by
.Fn lzx_init Ns ,
a 
.Fa block_size Ns ,
and a flag which says whether or not to subdivide the block.  If the 
.Fa subdivide
flag is
set, blocks may be subdivided to increase compression ratio based on the entropy of the
data at a given point.  Otherwise, just one block is created.  Returns
negative on error, 0 otherwise.
.Pp
.Bl -ohang -offset left -compact
.It Em Note:
The block size must not be larger than the window size.  While the compressor will
create apparently-valid LZX files if this restriction is violated, some decompressors
will not handle them.
.El
.Pp
The
.Fn lzx_reset
function may be called after any block in order to reset all
compression state except the number of compressed and uncompressed
bytes processed.  This forces the one-bit Intel preprocessing header
to be output again, the Lempel-Ziv window to be cleared, and the
Huffman tables to be reset to zero length.  It should only be called
on a frame boundary; the results of calling it elsewhere or during a
callback are undefined.
.Pp
To compress data, simply
call
.Fn lzx_compress_block
and optionally
.Fn lzx_reset
repeatedly, handling the various callbacks described above, until your data is exhausted.
.Sh ERRORS
The 
.BR lzx_init() ,
.BR lzx_compress_block() ", and"
.B lzx_finish()
functions return a negative number on error.
.Pp
The callbacks are intended to return a negative result on error, but
this is not yet understood by the compressor.
.Sh BUGS
.Pp
The compressor is currently unable to output an uncompressed block,
so incompressible data may expand more than is necessary (though still
not more than is permitted by the CAB standard, 6144 bytes.)
.Pp
There is no well-defined set of error codes.
.Pp
There is no way for the callbacks to report an error and abort the
compression.
.Pp
The algorithm for splitting blocks is suboptimal.
.Sh AUTHOR
Matthew T. Russotto
.Sh REFERENCES
.na
.Pp
LZXFMT.DOC \(em Microsoft LZX Data Compression Format (part of
Microsoft Cabinet SDK)
.Pp
Comments in cabextract.c, concerning errors in LZXFMT.DOC (part of
cabextract, at
.Pa Lk http://www.kyz.uklinux.net/cabextract.php3 Ns )
.Pp
.Tn CHM
file format documentation 
.Pf ( Pa Lk http://www.speakeasy.net/~russotto/chmformat.html Ns )
.ad
.Sh "SEE ALSO"
.Xr cabextract 1